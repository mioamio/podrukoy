let count = 0;
let user = null;
let currentDate = new Date();
let selectedDate = currentDate;
let dailyData = {}; // –î–∞–Ω–Ω—ã–µ –∑–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
let dailyDataWithTime = {}; // –î–∞–Ω–Ω—ã–µ —Å –≤—Ä–µ–º–µ–Ω–µ–º
let isLicenseAccepted = localStorage.getItem('licenseAccepted') === 'true'; // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Å–æ–≥–ª–∞—à–µ–Ω–∏—è
let selectedGender = localStorage.getItem('selectedGender'); // –í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª

// –≠–ª–µ–º–µ–Ω—Ç—ã DOM
const counterElement = document.getElementById('counter');
const startBtn = document.getElementById('startBtn');
const resetBtn = document.getElementById('resetBtn');
const commentElement = document.getElementById('comment');
const loginSection = document.getElementById('loginSection');
const appSection = document.getElementById('appSection');
const logoutBtn = document.getElementById('logoutBtn');
const calendarGrid = document.getElementById('calendarGrid');
const currentMonthElement = document.getElementById('currentMonth');
const prevMonthBtn = document.getElementById('prevMonthBtn');
const nextMonthBtn = document.getElementById('nextMonthBtn');
const themeToggleBtn = document.getElementById('themeToggleBtn');
const themeIcon = document.getElementById('themeIcon');
const body = document.body;
const inviteCodeInput = document.getElementById('inviteCodeInput');
const loginWithInviteBtn = document.getElementById('loginWithInviteBtn');
const inviteCodeDisplay = document.getElementById('inviteCodeDisplay');
const invitedByCodeDisplay = document.getElementById('invitedByCodeDisplay');
const userNameInput = document.getElementById('userNameInput');
const userNameSpan = document.getElementById('userNameSpan');
const generateInviteBtn = document.getElementById('generateInviteBtn'); // –ö–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞ –¥–ª—è —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const copyInviteCodeBtn = document.getElementById('copyInviteCodeBtn'); // –ö–Ω–æ–ø–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞

// GitHub Gist
const GIST_ID = '95fe90fca947982ef31e7c82e087eb5f'; // –í–∞—à Gist ID
const GITHUB_TOKEN = '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'; // –í–∞—à GitHub Token

// –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º
const licenseModal = document.getElementById('licenseModal');
const showLicense = document.getElementById('showLicense');
const acceptLicense = document.getElementById('acceptLicense');
const declineLicense = document.getElementById('declineLicense');

// –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º
showLicense.addEventListener('click', (e) => {
  e.preventDefault();
  licenseModal.style.display = 'flex';
});

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
licenseModal.addEventListener('click', (e) => {
  if (e.target === licenseModal) {
    licenseModal.style.display = 'none';
  }
});

// –ü—Ä–∏–Ω—è—Ç–∏–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è
acceptLicense.addEventListener('click', () => {
  isLicenseAccepted = true;
  localStorage.setItem('licenseAccepted', 'true');
  licenseModal.style.display = 'none';
  updateUIAfterLicenseAcceptance();
});

// –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è
declineLicense.addEventListener('click', () => {
  isLicenseAccepted = false;
  localStorage.setItem('licenseAccepted', 'false');
  licenseModal.style.display = 'none';
  updateUIAfterLicenseAcceptance();
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø–æ—Å–ª–µ –ø—Ä–∏–Ω—è—Ç–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Å–æ–≥–ª–∞—à–µ–Ω–∏—è
function updateUIAfterLicenseAcceptance() {
  if (isLicenseAccepted) {
    inviteCodeInput.disabled = false;
    loginWithInviteBtn.disabled = false;
  } else {
    inviteCodeInput.disabled = true;
    loginWithInviteBtn.disabled = true;
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function initializeUsers() {
  let users = JSON.parse(localStorage.getItem('users')) || {};
  if (!users['superuser']) {
    users['superuser'] = {
      id: 'superuser',
      inviteCode: null,
      name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
      invitedBy: null,
    };
    localStorage.setItem('users', JSON.stringify(users));
  }
  return users;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
function generateInviteCode() {
  const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
  let code = '';
  for (let i = 0; i < 6; i++) { // –î–ª–∏–Ω–∞ –∫–æ–¥–∞ ‚Äî 6 —Å–∏–º–≤–æ–ª–æ–≤
    code += characters.charAt(Math.floor(Math.random() * characters.length));
  }
  return code;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
function checkAuth() {
  const savedUser = localStorage.getItem('user');
  if (savedUser) {
    user = JSON.parse(savedUser);
    count = parseInt(localStorage.getItem(`${user.id}_count`)) || 0;
    dailyData = JSON.parse(localStorage.getItem(`${user.id}_dailyData`)) || {};
    dailyDataWithTime = JSON.parse(localStorage.getItem(`${user.id}_dailyDataWithTime`)) || {};
    updateUI();
    loginSection.style.display = 'none';
    appSection.style.display = 'block';
    inviteCodeDisplay.textContent = user.inviteCode || '–ù–µ—Ç –∫–æ–¥–∞'; // –£ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∫–æ–¥–∞
    invitedByCodeDisplay.textContent = user.invitedBy || '–ù–µ—Ç –∫–æ–¥–∞'; // –ö–æ–¥, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏
    userNameSpan.textContent = user.name || '–ê–Ω–æ–Ω–∏–º';
    updateUIForSuperuser(); // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
function updateUI() {
  counterElement.textContent = `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${count}`;
  updateComment();
  localStorage.setItem(`${user.id}_count`, count);
  localStorage.setItem(`${user.id}_dailyData`, JSON.stringify(dailyData));
  localStorage.setItem(`${user.id}_dailyDataWithTime`, JSON.stringify(dailyDataWithTime));
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
function updateComment() {
  if (count < 10) {
    commentElement.textContent = '–¢—ã –Ω–∞—á–∏–Ω–∞—é—â–∏–π üòä';
  } else if (count >= 10 && count < 20) {
    commentElement.textContent = '–¢—ã –≤ —É–¥–∞—Ä–µ! üöÄ';
  } else {
    commentElement.textContent = '–ü–æ—Ä–∞ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å! üõë';
  }
}

// –í—Ö–æ–¥ –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é
loginWithInviteBtn.addEventListener('click', async () => {
  if (!isLicenseAccepted) return;

  const inviteCode = inviteCodeInput.value.trim();
  const userName = userNameInput.value.trim() || '–ê–Ω–æ–Ω–∏–º'; // –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

  if (!inviteCode) {
    alert('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–¥');
    return;
  }

  const users = initializeUsers(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

  // –°—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç –≤–æ–π—Ç–∏ —Å –∫–æ–¥–æ–º 001
  if (inviteCode === '001' && userName === '001') {
    user = {
      id: 'superuser',
      inviteCode: null,
      name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
      invitedBy: null,
    };
    localStorage.setItem('user', JSON.stringify(user));
    checkAuth();
    alert('–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.');
    return;
  }

  if (users[inviteCode]) {
    const newInviteCodeForNewUser = generateInviteCode();
    user = {
      id: `user_${Date.now()}`,
      inviteCode: newInviteCodeForNewUser,
      name: userName,
      invitedBy: inviteCode,
    };
    users[newInviteCodeForNewUser] = user;
    localStorage.setItem('users', JSON.stringify(users));
    localStorage.setItem('user', JSON.stringify(user));
    checkAuth();
    alert(`–í–∞—à –Ω–æ–≤—ã–π –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–¥: ${newInviteCodeForNewUser}`);
  } else {
    alert('–ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–¥.');
    return;
  }

  await saveUsersToGist(users);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –¥–ª—è —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
generateInviteBtn.addEventListener('click', () => {
  const newInviteCode = generateInviteCode(); // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–æ–¥
  alert(`–ù–æ–≤—ã–π –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–¥: ${newInviteCode}`); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –∫–æ–¥ –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const users = JSON.parse(localStorage.getItem('users')) || {};
  users[newInviteCode] = {
    id: `user_${Date.now()}`, // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    inviteCode: newInviteCode,
    name: '–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', // –ò–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    invitedBy: 'superuser', // –ü—Ä–∏–≥–ª–∞—à–µ–Ω —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
  };
  localStorage.setItem('users', JSON.stringify(users));

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ GitHub Gist
  saveUsersToGist(users);
});

// –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
copyInviteCodeBtn.addEventListener('click', () => {
  const inviteCode = inviteCodeDisplay.textContent;
  if (inviteCode && inviteCode !== '–ù–µ—Ç –∫–æ–¥–∞') {
    navigator.clipboard.writeText(inviteCode)
      .then(() => {
        alert('–ü—Ä–æ–º–æ–∫–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞: ' + inviteCode);
      })
      .catch(() => {
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é.');
      });
  } else {
    alert('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è.');
  }
});

// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function updateUIForSuperuser() {
  if (user && user.id === 'superuser') {
    generateInviteBtn.style.display = 'block'; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
    inviteCodeDisplay.textContent = '–ù–µ—Ç –∫–æ–¥–∞'; // –£ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∫–æ–¥–∞
    invitedByCodeDisplay.textContent = '–ù–µ—Ç –∫–æ–¥–∞'; // –°—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∏–∫–æ–≥–æ –Ω–µ –ø—Ä–∏–≥–ª–∞—à–∞–ª
  } else {
    generateInviteBtn.style.display = 'none'; // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –≤ GitHub Gist
async function saveUsersToGist(users) {
  const data = JSON.stringify(users, null, 2);
  const response = await fetch(`https://api.github.com/gists/${GIST_ID}`, {
    method: 'PATCH',
    headers: {
      'Authorization': `token ${GITHUB_TOKEN}`,
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      files: {
        'users.json': {
          content: data,
        },
      },
    }),
  });

  if (response.ok) {
    console.log('–î–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Gist.');
  } else {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Gist:', await response.text());
  }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –∏–∑ GitHub Gist
async function loadUsersFromGist() {
  const response = await fetch(`https://api.github.com/gists/${GIST_ID}`, {
    headers: {
      'Authorization': `token ${GITHUB_TOKEN}`,
    },
  });

  if (response.ok) {
    const gist = await response.json();
    const users = JSON.parse(gist.files['users.json'].content);
    localStorage.setItem('users', JSON.stringify(users));
    console.log('–î–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ Gist.');
  } else {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Gist:', await response.text());
  }
}

// –í—ã—Ö–æ–¥
logoutBtn.addEventListener('click', () => {
  localStorage.removeItem('user');
  user = null;
  loginSection.style.display = 'block';
  appSection.style.display = 'none';
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å"
startBtn.addEventListener('click', () => {
  count++;
  const today = new Date().toISOString().split('T')[0]; // –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
  const now = new Date().toLocaleTimeString(); // –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
  if (!dailyDataWithTime[today]) {
    dailyDataWithTime[today] = [];
  }
  dailyDataWithTime[today].push(now);
  dailyData[today] = (dailyData[today] || 0) + 1;
  updateUI();
  renderCalendar(currentDate);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–±—Ä–æ—Å–∏—Ç—å"
resetBtn.addEventListener('click', () => {
  const today = new Date().toISOString().split('T')[0]; // –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
  count -= dailyData[today] || 0; // –£–º–µ–Ω—å—à–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ
  dailyData[today] = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
  dailyDataWithTime[today] = []; // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—Ä–µ–º–µ–Ω–∏
  updateUI();
  renderCalendar(currentDate);
});

// –°–º–µ–Ω–∞ —Ç–µ–º—ã
themeToggleBtn.addEventListener('click', () => {
  if (body.classList.contains('dark-theme')) {
    body.classList.remove('dark-theme');
    themeIcon.src = 'banana-light.ico';
    localStorage.setItem('theme', 'light');
  } else {
    body.classList.add('dark-theme');
    themeIcon.src = 'banana-night.ico';
    localStorage.setItem('theme', 'dark');
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Ç–µ–º—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
const savedTheme = localStorage.getItem('theme');
if (savedTheme === 'dark') {
  body.classList.add('dark-theme');
  themeIcon.src = 'banana-night.ico';
} else {
  themeIcon.src = 'banana-light.ico';
}

// –ö–∞–ª–µ–Ω–¥–∞—Ä—å
function renderCalendar(date) {
  const year = date.getFullYear();
  const month = date.getMonth();
  const firstDay = new Date(year, month, 1);
  const lastDay = new Date(year, month + 1, 0);
  const daysInMonth = lastDay.getDate();
  const startingDay = firstDay.getDay();

  currentMonthElement.textContent = new Intl.DateTimeFormat('ru-RU', { month: 'long', year: 'numeric' }).format(date);

  calendarGrid.innerHTML = '';

  for (let i = 0; i < startingDay; i++) {
    const emptyDay = document.createElement('div');
    emptyDay.classList.add('day', 'empty');
    calendarGrid.appendChild(emptyDay);
  }

  for (let i = 1; i <= daysInMonth; i++) {
    const day = document.createElement('div');
    day.classList.add('day');
    day.textContent = i;
    const dayDate = new Date(year, month, i).toISOString().split('T')[0];
    if (dailyData[dayDate]) {
      day.classList.add('active');
    }
    if (dayDate === new Date().toISOString().split('T')[0]) {
      day.classList.add('today');
    }
    day.addEventListener('click', () => {
      selectedDate = new Date(year, month, i);
      updateUIForSelectedDate();
      document.querySelectorAll('.day.selected').forEach(d => d.classList.remove('selected'));
      day.classList.add('selected');
    });
    calendarGrid.appendChild(day);
  }
}

function updateUIForSelectedDate() {
  const selectedDateStr = selectedDate.toISOString().split('T')[0];
  const selectedCount = dailyData[selectedDateStr] || 0;
  const selectedTimes = dailyDataWithTime[selectedDateStr] || [];
  commentElement.textContent = `–ù–∞ ${selectedDateStr}: ${selectedCount} –¥–µ–π—Å—Ç–≤–∏–π. –í—Ä–µ–º—è: ${selectedTimes.join(', ')}`;
}

prevMonthBtn.addEventListener('click', () => {
  currentDate.setMonth(currentDate.getMonth() - 1);
  renderCalendar(currentDate);
});

nextMonthBtn.addEventListener('click', () => {
  currentDate.setMonth(currentDate.getMonth() + 1);
  renderCalendar(currentDate);
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
renderCalendar(currentDate);

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
checkAuth();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
initializeUsers();

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –∏–∑ Gist –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
loadUsersFromGist();

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∫–Ω–æ–ø–æ–∫ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
updateUIAfterLicenseAcceptance();

// –í—ã–±–æ—Ä –ø–æ–ª–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ
if (!selectedGender) {
  showGenderSelection();
} else {
  applyGenderTheme(selectedGender);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞
function showGenderSelection() {
  const genderSelection = document.createElement('div');
  genderSelection.style.position = 'fixed';
  genderSelection.style.top = '0';
  genderSelection.style.left = '0';
  genderSelection.style.width = '100%';
  genderSelection.style.height = '100%';
  genderSelection.style.backgroundColor = 'rgba(0, 0, 0, 0.8)';
  genderSelection.style.display = 'flex';
  genderSelection.style.justifyContent = 'center';
  genderSelection.style.alignItems = 'center';
  genderSelection.style.zIndex = '1000';

  const maleButton = document.createElement('button');
  maleButton.innerHTML = '<img src="banana-light.ico" alt="–ú—É–∂—Å–∫–æ–π" style="width: 100px; height: 100px;">';
  maleButton.style.margin = '20px';
  maleButton.style.cursor = 'pointer';
  maleButton.addEventListener('click', () => {
    selectedGender = 'male';
    localStorage.setItem('selectedGender', 'male');
    applyGenderTheme('male');
    genderSelection.remove();
  });

  const femaleButton = document.createElement('button');
  femaleButton.innerHTML = '<img src="banana-night.ico" alt="–ñ–µ–Ω—Å–∫–∏–π" style="width: 100px; height: 100px;">';
  femaleButton.style.margin = '20px';
  femaleButton.style.cursor = 'pointer';
  femaleButton.addEventListener('click', () => {
    selectedGender = 'female';
    localStorage.setItem('selectedGender', 'female');
    applyGenderTheme('female');
    genderSelection.remove();
  });

  genderSelection.appendChild(maleButton);
  genderSelection.appendChild(femaleButton);
  document.body.appendChild(genderSelection);
}

// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª–∞
function applyGenderTheme(gender) {
  if (gender === 'male') {
    body.style.background = 'linear-gradient(135deg, #6a82fb, #fc5c7d)';
  } else if (gender === 'female') {
    body.style.background = 'linear-gradient(135deg, #ff9a9e, #fad0c4)';
  }
}

// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–º–µ–Ω—ã –ø–æ–ª–∞
const changeGenderBtn = document.createElement('button');
changeGenderBtn.textContent = '–°–º–µ–Ω–∏—Ç—å –ø–æ–ª';
changeGenderBtn.style.position = 'fixed';
changeGenderBtn.style.bottom = '20px';
changeGenderBtn.style.right = '20px';
changeGenderBtn.style.zIndex = '1000';
changeGenderBtn.style.padding = '10px 20px';
changeGenderBtn.style.borderRadius = '12px';
changeGenderBtn.style.backgroundColor = '#6a82fb';
changeGenderBtn.style.color = 'white';
changeGenderBtn.style.border = 'none';
changeGenderBtn.style.cursor = 'pointer';
changeGenderBtn.addEventListener('click', () => {
  showGenderSelection();
});

document.body.appendChild(changeGenderBtn);
