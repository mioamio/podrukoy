document.addEventListener('DOMContentLoaded', () => {
  let count = 0;
  let user = null;
  let chartInstance = null;

  // –≠–ª–µ–º–µ–Ω—Ç—ã DOM
  const counterElement = document.getElementById('counter');
  const startBtn = document.getElementById('startBtn');
  const resetBtn = document.getElementById('resetBtn');
  const commentElement = document.getElementById('comment');
  const loginSection = document.getElementById('loginSection');
  const appSection = document.getElementById('appSection');
  const logoutBtn = document.getElementById('logoutBtn');
  const calendarGrid = document.getElementById('calendarGrid');
  const progressChart = document.getElementById('progressChart')?.getContext('2d');
  const insightText = document.getElementById('insightText');
  const googleLoginBtn = document.getElementById('googleLoginBtn');
  const yandexLoginBtn = document.getElementById('yandexLoginBtn');
  const vkLoginBtn = document.getElementById('vkLoginBtn');
  const userGreeting = document.getElementById('userGreeting');
  const themeBtn = document.getElementById('themeBtn');
  const themeIcon = document.getElementById('themeIcon');
  const notification = document.getElementById('notification');

  if (!counterElement || !startBtn || !resetBtn || !commentElement || !loginSection || !appSection || !logoutBtn || !calendarGrid || !progressChart || !insightText || !googleLoginBtn || !yandexLoginBtn || !vkLoginBtn || !userGreeting || !themeBtn || !themeIcon || !notification) {
    console.error('–û–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ DOM –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!');
    return;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  function checkAuth() {
    const savedUser = localStorage.getItem('user');
    if (savedUser) {
      user = JSON.parse(savedUser);
      count = parseInt(localStorage.getItem(`${user.id}_count`)) || 0;
      updateUI();
      loadCalendar();
      renderChart();
      loginSection.style.display = 'none';
      appSection.style.display = 'block';
      userGreeting.textContent = `–ü—Ä–∏–≤–µ—Ç, ${user.name}!`;
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
  function updateUI() {
    counterElement.textContent = `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${count}`;
    updateComment();
    updateInsights();
    localStorage.setItem(`${user.id}_count`, count);
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
  function updateComment() {
    if (count < 10) {
      commentElement.textContent = '–¢—ã –Ω–∞—á–∏–Ω–∞—é—â–∏–π üòä';
    } else if (count >= 10 && count < 20) {
      commentElement.textContent = '–¢—ã –≤ —É–¥–∞—Ä–µ! üöÄ';
    } else {
      commentElement.textContent = '–ü–æ—Ä–∞ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å! üõë';
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
  function updateInsights() {
    const activeDays = JSON.parse(localStorage.getItem(`${user.id}_calendar`)) || [];
    const totalDays = activeDays.length;
    const last7Days = activeDays.slice(-7).filter(day => day).length;
    insightText.textContent = `–ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–Ω–µ–π: ${totalDays}. –ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é: ${last7Days}.`;
  }

  // –í—Ö–æ–¥ —á–µ—Ä–µ–∑ Google
  googleLoginBtn.addEventListener('click', () => {
    user = { id: 'google_user_id', name: 'Google User' };
    localStorage.setItem('user', JSON.stringify(user));
    checkAuth();
    showNotification(`–í—Ö–æ–¥ —á–µ—Ä–µ–∑ Google –≤—ã–ø–æ–ª–Ω–µ–Ω!`);
  });

  // –í—Ö–æ–¥ —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å
  yandexLoginBtn.addEventListener('click', () => {
    user = { id: 'yandex_user_id', name: 'Yandex User' };
    localStorage.setItem('user', JSON.stringify(user));
    checkAuth();
    showNotification(`–í—Ö–æ–¥ —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å –≤—ã–ø–æ–ª–Ω–µ–Ω!`);
  });

  // –í—Ö–æ–¥ —á–µ—Ä–µ–∑ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ
  vkLoginBtn.addEventListener('click', () => {
    user = { id: 'vk_user_id', name: 'VK User' };
    localStorage.setItem('user', JSON.stringify(user));
    checkAuth();
    showNotification(`–í—Ö–æ–¥ —á–µ—Ä–µ–∑ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω!`);
  });

  // –í—ã—Ö–æ–¥
  logoutBtn.addEventListener('click', () => {
    localStorage.removeItem('user');
    user = null;
    loginSection.style.display = 'block';
    appSection.style.display = 'none';
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ—Ç–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"
  startBtn.addEventListener('click', () => {
    count++;
    const now = new Date();
    const date = now.toISOString().split('T')[0];
    const time = now.toTimeString().split(' ')[0];

    const activities = JSON.parse(localStorage.getItem(`${user.id}_activities`)) || [];
    activities.push({ date, time });
    localStorage.setItem(`${user.id}_activities`, JSON.stringify(activities));

    updateUI();
    updateCalendar();
    showNotification(`–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ—Ç–º–µ—á–µ–Ω–∞! üéâ`);
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–±—Ä–æ—Å–∏—Ç—å"
  resetBtn.addEventListener('click', () => {
    count = 0;
    updateUI();
    showNotification(`–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–æ—à–µ–Ω. üîÑ`);
  });

  // –ö–∞–ª–µ–Ω–¥–∞—Ä—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  function loadCalendar() {
    const activeDays = JSON.parse(localStorage.getItem(`${user.id}_calendar`)) || [];
    const today = new Date().toISOString().split('T')[0];
    if (!activeDays.includes(today)) {
      activeDays.push(today);
      localStorage.setItem(`${user.id}_calendar`, JSON.stringify(activeDays));
    }
    renderCalendar(activeDays);
  }

  function renderCalendar(activeDays) {
    calendarGrid.innerHTML = '';
    const daysInMonth = new Date(new Date().getFullYear(), new Date().getMonth() + 1, 0).getDate();
    for (let i = 1; i <= daysInMonth; i++) {
      const day = document.createElement('div');
      day.classList.add('day');
      day.textContent = i;
      const date = new Date(new Date().getFullYear(), new Date().getMonth(), i).toISOString().split('T')[0];
      if (activeDays.includes(date)) {
        day.classList.add('active');
      }
      calendarGrid.appendChild(day);
    }
  }

  // –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  function renderChart() {
    if (chartInstance) {
      chartInstance.destroy();
    }
    const labels = [];
    const data = [];
    for (let i = 1; i <= 30; i++) {
      labels.push(`–î–µ–Ω—å ${i}`);
      data.push(localStorage.getItem(`${user.id}_day_${i}`) ? 1 : 0);
    }
    chartInstance = new Chart(progressChart, {
      type: 'line',
      data: {
        labels: labels,
        datasets: [{
          label: '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
          data: data,
          borderColor: '#6a82fb',
          backgroundColor: 'rgba(106, 130, 251, 0.2)',
          fill: true,
        }]
      },
      options: {
        responsive: true,
        scales: {
          y: {
            beginAtZero: true,
            ticks: {
              stepSize: 1,
            }
          }
        }
      }
    });
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –¥–Ω—é –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
  calendarGrid.addEventListener('click', (event) => {
    if (event.target.classList.contains('day')) {
      const day = event.target.textContent;
      const now = new Date();
      const year = now.getFullYear();
      const month = now.getMonth() + 1; // –ú–µ—Å—è—Ü—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 0
      const date = `${year}-${String(month).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
      updateChartForDate(date);
    }
  });

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
  function updateChartForDate(date) {
    const activities = JSON.parse(localStorage.getItem(`${user.id}_activities`)) || [];
    const filteredActivities = activities.filter(activity => activity.date === date);

    if (filteredActivities.length > 0) {
      const labels = filteredActivities.map(activity => activity.time);
      const data = filteredActivities.map(() => 1); // –í—Å–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–∞–≤–Ω—ã 1 –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞

      if (chartInstance) {
        chartInstance.destroy();
      }

      chartInstance = new Chart(progressChart, {
        type: 'bar', // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–æ–ª–±—á–∞—Ç—É—é –¥–∏–∞–≥—Ä–∞–º–º—É –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
        data: {
          labels: labels,
          datasets: [{
            label: '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
            data: data,
            backgroundColor: '#6a82fb',
            borderColor: '#6a82fb',
            borderWidth: 1,
          }]
        },
        options: {
          responsive: true,
          scales: {
            y: {
              beginAtZero: true,
              ticks: {
                stepSize: 1,
              }
            }
          }
        }
      });
    } else {
      if (chartInstance) {
        chartInstance.destroy();
      }
      chartInstance = new Chart(progressChart, {
        type: 'bar',
        data: {
          labels: ['–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'],
          datasets: [{
            label: '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
            data: [0],
            backgroundColor: '#ff6f61',
            borderColor: '#ff6f61',
            borderWidth: 1,
          }]
        },
        options: {
          responsive: true,
          scales: {
            y: {
              beginAtZero: true,
              ticks: {
                stepSize: 1,
              }
            }
          }
        }
      });
    }
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  function showNotification(message) {
    notification.textContent = message;
    notification.style.display = 'block';
    setTimeout(() => {
      notification.style.display = 'none';
    }, 3000);
  }

  // –¢–µ–º–Ω–∞—è —Ç–µ–º–∞
  themeBtn.addEventListener('click', () => {
    document.body.classList.toggle('dark-theme');
    const isDarkTheme = document.body.classList.contains('dark-theme');
    localStorage.setItem('theme', isDarkTheme ? 'dark' : 'light');
    themeIcon.src = isDarkTheme ? 'banana-night.ico' : 'banana-light.ico';
    document.getElementById('favicon').href = 'icon.ico';
  });

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–º—ã
  const savedTheme = localStorage.getItem('theme');
  if (savedTheme === 'dark') {
    document.body.classList.add('dark-theme');
    themeIcon.src = 'banana-night.ico';
  } else {
    themeIcon.src = 'banana-light.ico';
  }
  document.getElementById('favicon').href = 'icon.ico';

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  checkAuth();
});
